/*
 * This file is generated by gdbus-codegen, do not modify it.
 *
 * The license of this code is the same as for the D-Bus interface description
 * it was derived from. Note that it links to GLib, so must comply with the
 * LGPL linking clauses.
 */

#ifndef __BLUEZ_GATT_H__
#define __BLUEZ_GATT_H__

#include <gio/gio.h>

G_BEGIN_DECLS


/* ------------------------------------------------------------------------ */
/* Declarations for org.freedesktop.DBus.Properties */

#define AEMI_TYPE_ORG_FREEDESKTOP_DBUS_PROPERTIES (aemi_org_freedesktop_dbus_properties_get_type ())
#define AEMI_ORG_FREEDESKTOP_DBUS_PROPERTIES(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), AEMI_TYPE_ORG_FREEDESKTOP_DBUS_PROPERTIES, AEMIOrgFreedesktopDBusProperties))
#define AEMI_IS_ORG_FREEDESKTOP_DBUS_PROPERTIES(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), AEMI_TYPE_ORG_FREEDESKTOP_DBUS_PROPERTIES))
#define AEMI_ORG_FREEDESKTOP_DBUS_PROPERTIES_GET_IFACE(o) (G_TYPE_INSTANCE_GET_INTERFACE ((o), AEMI_TYPE_ORG_FREEDESKTOP_DBUS_PROPERTIES, AEMIOrgFreedesktopDBusPropertiesIface))

struct _AEMIOrgFreedesktopDBusProperties;
typedef struct _AEMIOrgFreedesktopDBusProperties AEMIOrgFreedesktopDBusProperties;
typedef struct _AEMIOrgFreedesktopDBusPropertiesIface AEMIOrgFreedesktopDBusPropertiesIface;

struct _AEMIOrgFreedesktopDBusPropertiesIface
{
  GTypeInterface parent_iface;


  gboolean (*handle_get) (
    AEMIOrgFreedesktopDBusProperties *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_interface_name,
    const gchar *arg_property_name);

  gboolean (*handle_get_all) (
    AEMIOrgFreedesktopDBusProperties *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_interface_name);

  gboolean (*handle_set) (
    AEMIOrgFreedesktopDBusProperties *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_interface_name,
    const gchar *arg_property_name,
    GVariant *arg_value);

  void (*properties_changed) (
    AEMIOrgFreedesktopDBusProperties *object,
    const gchar *arg_interface_name,
    GVariant *arg_changed_properties,
    const gchar *const *arg_invalidated_properties);

};

GType aemi_org_freedesktop_dbus_properties_get_type (void) G_GNUC_CONST;

GDBusInterfaceInfo *aemi_org_freedesktop_dbus_properties_interface_info (void);
guint aemi_org_freedesktop_dbus_properties_override_properties (GObjectClass *klass, guint property_id_begin);


/* D-Bus method call completion functions: */
void aemi_org_freedesktop_dbus_properties_complete_get (
    AEMIOrgFreedesktopDBusProperties *object,
    GDBusMethodInvocation *invocation,
    GVariant *value);

void aemi_org_freedesktop_dbus_properties_complete_set (
    AEMIOrgFreedesktopDBusProperties *object,
    GDBusMethodInvocation *invocation);

void aemi_org_freedesktop_dbus_properties_complete_get_all (
    AEMIOrgFreedesktopDBusProperties *object,
    GDBusMethodInvocation *invocation,
    GVariant *properties);



/* D-Bus signal emissions functions: */
void aemi_org_freedesktop_dbus_properties_emit_properties_changed (
    AEMIOrgFreedesktopDBusProperties *object,
    const gchar *arg_interface_name,
    GVariant *arg_changed_properties,
    const gchar *const *arg_invalidated_properties);



/* D-Bus method calls: */
void aemi_org_freedesktop_dbus_properties_call_get (
    AEMIOrgFreedesktopDBusProperties *proxy,
    const gchar *arg_interface_name,
    const gchar *arg_property_name,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean aemi_org_freedesktop_dbus_properties_call_get_finish (
    AEMIOrgFreedesktopDBusProperties *proxy,
    GVariant **out_value,
    GAsyncResult *res,
    GError **error);

gboolean aemi_org_freedesktop_dbus_properties_call_get_sync (
    AEMIOrgFreedesktopDBusProperties *proxy,
    const gchar *arg_interface_name,
    const gchar *arg_property_name,
    GVariant **out_value,
    GCancellable *cancellable,
    GError **error);

void aemi_org_freedesktop_dbus_properties_call_set (
    AEMIOrgFreedesktopDBusProperties *proxy,
    const gchar *arg_interface_name,
    const gchar *arg_property_name,
    GVariant *arg_value,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean aemi_org_freedesktop_dbus_properties_call_set_finish (
    AEMIOrgFreedesktopDBusProperties *proxy,
    GAsyncResult *res,
    GError **error);

gboolean aemi_org_freedesktop_dbus_properties_call_set_sync (
    AEMIOrgFreedesktopDBusProperties *proxy,
    const gchar *arg_interface_name,
    const gchar *arg_property_name,
    GVariant *arg_value,
    GCancellable *cancellable,
    GError **error);

void aemi_org_freedesktop_dbus_properties_call_get_all (
    AEMIOrgFreedesktopDBusProperties *proxy,
    const gchar *arg_interface_name,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean aemi_org_freedesktop_dbus_properties_call_get_all_finish (
    AEMIOrgFreedesktopDBusProperties *proxy,
    GVariant **out_properties,
    GAsyncResult *res,
    GError **error);

gboolean aemi_org_freedesktop_dbus_properties_call_get_all_sync (
    AEMIOrgFreedesktopDBusProperties *proxy,
    const gchar *arg_interface_name,
    GVariant **out_properties,
    GCancellable *cancellable,
    GError **error);



/* ---- */

#define AEMI_TYPE_ORG_FREEDESKTOP_DBUS_PROPERTIES_PROXY (aemi_org_freedesktop_dbus_properties_proxy_get_type ())
#define AEMI_ORG_FREEDESKTOP_DBUS_PROPERTIES_PROXY(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), AEMI_TYPE_ORG_FREEDESKTOP_DBUS_PROPERTIES_PROXY, AEMIOrgFreedesktopDBusPropertiesProxy))
#define AEMI_ORG_FREEDESKTOP_DBUS_PROPERTIES_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), AEMI_TYPE_ORG_FREEDESKTOP_DBUS_PROPERTIES_PROXY, AEMIOrgFreedesktopDBusPropertiesProxyClass))
#define AEMI_ORG_FREEDESKTOP_DBUS_PROPERTIES_PROXY_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), AEMI_TYPE_ORG_FREEDESKTOP_DBUS_PROPERTIES_PROXY, AEMIOrgFreedesktopDBusPropertiesProxyClass))
#define AEMI_IS_ORG_FREEDESKTOP_DBUS_PROPERTIES_PROXY(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), AEMI_TYPE_ORG_FREEDESKTOP_DBUS_PROPERTIES_PROXY))
#define AEMI_IS_ORG_FREEDESKTOP_DBUS_PROPERTIES_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), AEMI_TYPE_ORG_FREEDESKTOP_DBUS_PROPERTIES_PROXY))

typedef struct _AEMIOrgFreedesktopDBusPropertiesProxy AEMIOrgFreedesktopDBusPropertiesProxy;
typedef struct _AEMIOrgFreedesktopDBusPropertiesProxyClass AEMIOrgFreedesktopDBusPropertiesProxyClass;
typedef struct _AEMIOrgFreedesktopDBusPropertiesProxyPrivate AEMIOrgFreedesktopDBusPropertiesProxyPrivate;

struct _AEMIOrgFreedesktopDBusPropertiesProxy
{
  /*< private >*/
  GDBusProxy parent_instance;
  AEMIOrgFreedesktopDBusPropertiesProxyPrivate *priv;
};

struct _AEMIOrgFreedesktopDBusPropertiesProxyClass
{
  GDBusProxyClass parent_class;
};

GType aemi_org_freedesktop_dbus_properties_proxy_get_type (void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (AEMIOrgFreedesktopDBusPropertiesProxy, g_object_unref)
#endif

void aemi_org_freedesktop_dbus_properties_proxy_new (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
AEMIOrgFreedesktopDBusProperties *aemi_org_freedesktop_dbus_properties_proxy_new_finish (
    GAsyncResult        *res,
    GError             **error);
AEMIOrgFreedesktopDBusProperties *aemi_org_freedesktop_dbus_properties_proxy_new_sync (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);

void aemi_org_freedesktop_dbus_properties_proxy_new_for_bus (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
AEMIOrgFreedesktopDBusProperties *aemi_org_freedesktop_dbus_properties_proxy_new_for_bus_finish (
    GAsyncResult        *res,
    GError             **error);
AEMIOrgFreedesktopDBusProperties *aemi_org_freedesktop_dbus_properties_proxy_new_for_bus_sync (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);


/* ---- */

#define AEMI_TYPE_ORG_FREEDESKTOP_DBUS_PROPERTIES_SKELETON (aemi_org_freedesktop_dbus_properties_skeleton_get_type ())
#define AEMI_ORG_FREEDESKTOP_DBUS_PROPERTIES_SKELETON(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), AEMI_TYPE_ORG_FREEDESKTOP_DBUS_PROPERTIES_SKELETON, AEMIOrgFreedesktopDBusPropertiesSkeleton))
#define AEMI_ORG_FREEDESKTOP_DBUS_PROPERTIES_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), AEMI_TYPE_ORG_FREEDESKTOP_DBUS_PROPERTIES_SKELETON, AEMIOrgFreedesktopDBusPropertiesSkeletonClass))
#define AEMI_ORG_FREEDESKTOP_DBUS_PROPERTIES_SKELETON_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), AEMI_TYPE_ORG_FREEDESKTOP_DBUS_PROPERTIES_SKELETON, AEMIOrgFreedesktopDBusPropertiesSkeletonClass))
#define AEMI_IS_ORG_FREEDESKTOP_DBUS_PROPERTIES_SKELETON(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), AEMI_TYPE_ORG_FREEDESKTOP_DBUS_PROPERTIES_SKELETON))
#define AEMI_IS_ORG_FREEDESKTOP_DBUS_PROPERTIES_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), AEMI_TYPE_ORG_FREEDESKTOP_DBUS_PROPERTIES_SKELETON))

typedef struct _AEMIOrgFreedesktopDBusPropertiesSkeleton AEMIOrgFreedesktopDBusPropertiesSkeleton;
typedef struct _AEMIOrgFreedesktopDBusPropertiesSkeletonClass AEMIOrgFreedesktopDBusPropertiesSkeletonClass;
typedef struct _AEMIOrgFreedesktopDBusPropertiesSkeletonPrivate AEMIOrgFreedesktopDBusPropertiesSkeletonPrivate;

struct _AEMIOrgFreedesktopDBusPropertiesSkeleton
{
  /*< private >*/
  GDBusInterfaceSkeleton parent_instance;
  AEMIOrgFreedesktopDBusPropertiesSkeletonPrivate *priv;
};

struct _AEMIOrgFreedesktopDBusPropertiesSkeletonClass
{
  GDBusInterfaceSkeletonClass parent_class;
};

GType aemi_org_freedesktop_dbus_properties_skeleton_get_type (void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (AEMIOrgFreedesktopDBusPropertiesSkeleton, g_object_unref)
#endif

AEMIOrgFreedesktopDBusProperties *aemi_org_freedesktop_dbus_properties_skeleton_new (void);


/* ------------------------------------------------------------------------ */
/* Declarations for org.bluez.GattService1 */

#define AEMI_TYPE_ORG_BLUEZ_GATT_SERVICE1 (aemi_org_bluez_gatt_service1_get_type ())
#define AEMI_ORG_BLUEZ_GATT_SERVICE1(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), AEMI_TYPE_ORG_BLUEZ_GATT_SERVICE1, AEMIOrgBluezGattService1))
#define AEMI_IS_ORG_BLUEZ_GATT_SERVICE1(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), AEMI_TYPE_ORG_BLUEZ_GATT_SERVICE1))
#define AEMI_ORG_BLUEZ_GATT_SERVICE1_GET_IFACE(o) (G_TYPE_INSTANCE_GET_INTERFACE ((o), AEMI_TYPE_ORG_BLUEZ_GATT_SERVICE1, AEMIOrgBluezGattService1Iface))

struct _AEMIOrgBluezGattService1;
typedef struct _AEMIOrgBluezGattService1 AEMIOrgBluezGattService1;
typedef struct _AEMIOrgBluezGattService1Iface AEMIOrgBluezGattService1Iface;

struct _AEMIOrgBluezGattService1Iface
{
  GTypeInterface parent_iface;

  guint16  (*get_handle) (AEMIOrgBluezGattService1 *object);

  const gchar *const * (*get_includes) (AEMIOrgBluezGattService1 *object);

  gboolean  (*get_primary) (AEMIOrgBluezGattService1 *object);

  const gchar * (*get_uuid) (AEMIOrgBluezGattService1 *object);

};

GType aemi_org_bluez_gatt_service1_get_type (void) G_GNUC_CONST;

GDBusInterfaceInfo *aemi_org_bluez_gatt_service1_interface_info (void);
guint aemi_org_bluez_gatt_service1_override_properties (GObjectClass *klass, guint property_id_begin);


/* D-Bus property accessors: */
const gchar *aemi_org_bluez_gatt_service1_get_uuid (AEMIOrgBluezGattService1 *object);
gchar *aemi_org_bluez_gatt_service1_dup_uuid (AEMIOrgBluezGattService1 *object);
void aemi_org_bluez_gatt_service1_set_uuid (AEMIOrgBluezGattService1 *object, const gchar *value);

gboolean aemi_org_bluez_gatt_service1_get_primary (AEMIOrgBluezGattService1 *object);
void aemi_org_bluez_gatt_service1_set_primary (AEMIOrgBluezGattService1 *object, gboolean value);

const gchar *const *aemi_org_bluez_gatt_service1_get_includes (AEMIOrgBluezGattService1 *object);
gchar **aemi_org_bluez_gatt_service1_dup_includes (AEMIOrgBluezGattService1 *object);
void aemi_org_bluez_gatt_service1_set_includes (AEMIOrgBluezGattService1 *object, const gchar *const *value);

guint16 aemi_org_bluez_gatt_service1_get_handle (AEMIOrgBluezGattService1 *object);
void aemi_org_bluez_gatt_service1_set_handle (AEMIOrgBluezGattService1 *object, guint16 value);


/* ---- */

#define AEMI_TYPE_ORG_BLUEZ_GATT_SERVICE1_PROXY (aemi_org_bluez_gatt_service1_proxy_get_type ())
#define AEMI_ORG_BLUEZ_GATT_SERVICE1_PROXY(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), AEMI_TYPE_ORG_BLUEZ_GATT_SERVICE1_PROXY, AEMIOrgBluezGattService1Proxy))
#define AEMI_ORG_BLUEZ_GATT_SERVICE1_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), AEMI_TYPE_ORG_BLUEZ_GATT_SERVICE1_PROXY, AEMIOrgBluezGattService1ProxyClass))
#define AEMI_ORG_BLUEZ_GATT_SERVICE1_PROXY_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), AEMI_TYPE_ORG_BLUEZ_GATT_SERVICE1_PROXY, AEMIOrgBluezGattService1ProxyClass))
#define AEMI_IS_ORG_BLUEZ_GATT_SERVICE1_PROXY(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), AEMI_TYPE_ORG_BLUEZ_GATT_SERVICE1_PROXY))
#define AEMI_IS_ORG_BLUEZ_GATT_SERVICE1_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), AEMI_TYPE_ORG_BLUEZ_GATT_SERVICE1_PROXY))

typedef struct _AEMIOrgBluezGattService1Proxy AEMIOrgBluezGattService1Proxy;
typedef struct _AEMIOrgBluezGattService1ProxyClass AEMIOrgBluezGattService1ProxyClass;
typedef struct _AEMIOrgBluezGattService1ProxyPrivate AEMIOrgBluezGattService1ProxyPrivate;

struct _AEMIOrgBluezGattService1Proxy
{
  /*< private >*/
  GDBusProxy parent_instance;
  AEMIOrgBluezGattService1ProxyPrivate *priv;
};

struct _AEMIOrgBluezGattService1ProxyClass
{
  GDBusProxyClass parent_class;
};

GType aemi_org_bluez_gatt_service1_proxy_get_type (void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (AEMIOrgBluezGattService1Proxy, g_object_unref)
#endif

void aemi_org_bluez_gatt_service1_proxy_new (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
AEMIOrgBluezGattService1 *aemi_org_bluez_gatt_service1_proxy_new_finish (
    GAsyncResult        *res,
    GError             **error);
AEMIOrgBluezGattService1 *aemi_org_bluez_gatt_service1_proxy_new_sync (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);

void aemi_org_bluez_gatt_service1_proxy_new_for_bus (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
AEMIOrgBluezGattService1 *aemi_org_bluez_gatt_service1_proxy_new_for_bus_finish (
    GAsyncResult        *res,
    GError             **error);
AEMIOrgBluezGattService1 *aemi_org_bluez_gatt_service1_proxy_new_for_bus_sync (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);


/* ---- */

#define AEMI_TYPE_ORG_BLUEZ_GATT_SERVICE1_SKELETON (aemi_org_bluez_gatt_service1_skeleton_get_type ())
#define AEMI_ORG_BLUEZ_GATT_SERVICE1_SKELETON(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), AEMI_TYPE_ORG_BLUEZ_GATT_SERVICE1_SKELETON, AEMIOrgBluezGattService1Skeleton))
#define AEMI_ORG_BLUEZ_GATT_SERVICE1_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), AEMI_TYPE_ORG_BLUEZ_GATT_SERVICE1_SKELETON, AEMIOrgBluezGattService1SkeletonClass))
#define AEMI_ORG_BLUEZ_GATT_SERVICE1_SKELETON_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), AEMI_TYPE_ORG_BLUEZ_GATT_SERVICE1_SKELETON, AEMIOrgBluezGattService1SkeletonClass))
#define AEMI_IS_ORG_BLUEZ_GATT_SERVICE1_SKELETON(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), AEMI_TYPE_ORG_BLUEZ_GATT_SERVICE1_SKELETON))
#define AEMI_IS_ORG_BLUEZ_GATT_SERVICE1_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), AEMI_TYPE_ORG_BLUEZ_GATT_SERVICE1_SKELETON))

typedef struct _AEMIOrgBluezGattService1Skeleton AEMIOrgBluezGattService1Skeleton;
typedef struct _AEMIOrgBluezGattService1SkeletonClass AEMIOrgBluezGattService1SkeletonClass;
typedef struct _AEMIOrgBluezGattService1SkeletonPrivate AEMIOrgBluezGattService1SkeletonPrivate;

struct _AEMIOrgBluezGattService1Skeleton
{
  /*< private >*/
  GDBusInterfaceSkeleton parent_instance;
  AEMIOrgBluezGattService1SkeletonPrivate *priv;
};

struct _AEMIOrgBluezGattService1SkeletonClass
{
  GDBusInterfaceSkeletonClass parent_class;
};

GType aemi_org_bluez_gatt_service1_skeleton_get_type (void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (AEMIOrgBluezGattService1Skeleton, g_object_unref)
#endif

AEMIOrgBluezGattService1 *aemi_org_bluez_gatt_service1_skeleton_new (void);


/* ------------------------------------------------------------------------ */
/* Declarations for org.bluez.GattCharacteristic1 */

#define AEMI_TYPE_ORG_BLUEZ_GATT_CHARACTERISTIC1 (aemi_org_bluez_gatt_characteristic1_get_type ())
#define AEMI_ORG_BLUEZ_GATT_CHARACTERISTIC1(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), AEMI_TYPE_ORG_BLUEZ_GATT_CHARACTERISTIC1, AEMIOrgBluezGattCharacteristic1))
#define AEMI_IS_ORG_BLUEZ_GATT_CHARACTERISTIC1(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), AEMI_TYPE_ORG_BLUEZ_GATT_CHARACTERISTIC1))
#define AEMI_ORG_BLUEZ_GATT_CHARACTERISTIC1_GET_IFACE(o) (G_TYPE_INSTANCE_GET_INTERFACE ((o), AEMI_TYPE_ORG_BLUEZ_GATT_CHARACTERISTIC1, AEMIOrgBluezGattCharacteristic1Iface))

struct _AEMIOrgBluezGattCharacteristic1;
typedef struct _AEMIOrgBluezGattCharacteristic1 AEMIOrgBluezGattCharacteristic1;
typedef struct _AEMIOrgBluezGattCharacteristic1Iface AEMIOrgBluezGattCharacteristic1Iface;

struct _AEMIOrgBluezGattCharacteristic1Iface
{
  GTypeInterface parent_iface;


  gboolean (*handle_acquire_notify) (
    AEMIOrgBluezGattCharacteristic1 *object,
    GDBusMethodInvocation *invocation,
    GVariant *arg_options);

  gboolean (*handle_acquire_write) (
    AEMIOrgBluezGattCharacteristic1 *object,
    GDBusMethodInvocation *invocation,
    GVariant *arg_options);

  gboolean (*handle_confirm) (
    AEMIOrgBluezGattCharacteristic1 *object,
    GDBusMethodInvocation *invocation);

  gboolean (*handle_read_value) (
    AEMIOrgBluezGattCharacteristic1 *object,
    GDBusMethodInvocation *invocation,
    GVariant *arg_options);

  gboolean (*handle_start_notify) (
    AEMIOrgBluezGattCharacteristic1 *object,
    GDBusMethodInvocation *invocation);

  gboolean (*handle_stop_notify) (
    AEMIOrgBluezGattCharacteristic1 *object,
    GDBusMethodInvocation *invocation);

  gboolean (*handle_write_value) (
    AEMIOrgBluezGattCharacteristic1 *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_value,
    GVariant *arg_options);

  const gchar *const * (*get_flags) (AEMIOrgBluezGattCharacteristic1 *object);

  guint16  (*get_handle) (AEMIOrgBluezGattCharacteristic1 *object);

  guint16  (*get_mtu) (AEMIOrgBluezGattCharacteristic1 *object);

  gboolean  (*get_notify_acquired) (AEMIOrgBluezGattCharacteristic1 *object);

  gboolean  (*get_notifying) (AEMIOrgBluezGattCharacteristic1 *object);

  const gchar * (*get_service) (AEMIOrgBluezGattCharacteristic1 *object);

  const gchar * (*get_uuid) (AEMIOrgBluezGattCharacteristic1 *object);

  const gchar * (*get_value) (AEMIOrgBluezGattCharacteristic1 *object);

  gboolean  (*get_write_acquired) (AEMIOrgBluezGattCharacteristic1 *object);

};

GType aemi_org_bluez_gatt_characteristic1_get_type (void) G_GNUC_CONST;

GDBusInterfaceInfo *aemi_org_bluez_gatt_characteristic1_interface_info (void);
guint aemi_org_bluez_gatt_characteristic1_override_properties (GObjectClass *klass, guint property_id_begin);


/* D-Bus method call completion functions: */
void aemi_org_bluez_gatt_characteristic1_complete_read_value (
    AEMIOrgBluezGattCharacteristic1 *object,
    GDBusMethodInvocation *invocation,
    const gchar *value);

void aemi_org_bluez_gatt_characteristic1_complete_write_value (
    AEMIOrgBluezGattCharacteristic1 *object,
    GDBusMethodInvocation *invocation);

void aemi_org_bluez_gatt_characteristic1_complete_acquire_write (
    AEMIOrgBluezGattCharacteristic1 *object,
    GDBusMethodInvocation *invocation,
    GVariant *sockfd,
    guint16 mtu);

void aemi_org_bluez_gatt_characteristic1_complete_acquire_notify (
    AEMIOrgBluezGattCharacteristic1 *object,
    GDBusMethodInvocation *invocation,
    GVariant *sockfd,
    guint16 mtu);

void aemi_org_bluez_gatt_characteristic1_complete_start_notify (
    AEMIOrgBluezGattCharacteristic1 *object,
    GDBusMethodInvocation *invocation);

void aemi_org_bluez_gatt_characteristic1_complete_stop_notify (
    AEMIOrgBluezGattCharacteristic1 *object,
    GDBusMethodInvocation *invocation);

void aemi_org_bluez_gatt_characteristic1_complete_confirm (
    AEMIOrgBluezGattCharacteristic1 *object,
    GDBusMethodInvocation *invocation);



/* D-Bus method calls: */
void aemi_org_bluez_gatt_characteristic1_call_read_value (
    AEMIOrgBluezGattCharacteristic1 *proxy,
    GVariant *arg_options,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean aemi_org_bluez_gatt_characteristic1_call_read_value_finish (
    AEMIOrgBluezGattCharacteristic1 *proxy,
    gchar **out_value,
    GAsyncResult *res,
    GError **error);

gboolean aemi_org_bluez_gatt_characteristic1_call_read_value_sync (
    AEMIOrgBluezGattCharacteristic1 *proxy,
    GVariant *arg_options,
    gchar **out_value,
    GCancellable *cancellable,
    GError **error);

void aemi_org_bluez_gatt_characteristic1_call_write_value (
    AEMIOrgBluezGattCharacteristic1 *proxy,
    const gchar *arg_value,
    GVariant *arg_options,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean aemi_org_bluez_gatt_characteristic1_call_write_value_finish (
    AEMIOrgBluezGattCharacteristic1 *proxy,
    GAsyncResult *res,
    GError **error);

gboolean aemi_org_bluez_gatt_characteristic1_call_write_value_sync (
    AEMIOrgBluezGattCharacteristic1 *proxy,
    const gchar *arg_value,
    GVariant *arg_options,
    GCancellable *cancellable,
    GError **error);

void aemi_org_bluez_gatt_characteristic1_call_acquire_write (
    AEMIOrgBluezGattCharacteristic1 *proxy,
    GVariant *arg_options,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean aemi_org_bluez_gatt_characteristic1_call_acquire_write_finish (
    AEMIOrgBluezGattCharacteristic1 *proxy,
    GVariant **out_sockfd,
    guint16 *out_mtu,
    GAsyncResult *res,
    GError **error);

gboolean aemi_org_bluez_gatt_characteristic1_call_acquire_write_sync (
    AEMIOrgBluezGattCharacteristic1 *proxy,
    GVariant *arg_options,
    GVariant **out_sockfd,
    guint16 *out_mtu,
    GCancellable *cancellable,
    GError **error);

void aemi_org_bluez_gatt_characteristic1_call_acquire_notify (
    AEMIOrgBluezGattCharacteristic1 *proxy,
    GVariant *arg_options,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean aemi_org_bluez_gatt_characteristic1_call_acquire_notify_finish (
    AEMIOrgBluezGattCharacteristic1 *proxy,
    GVariant **out_sockfd,
    guint16 *out_mtu,
    GAsyncResult *res,
    GError **error);

gboolean aemi_org_bluez_gatt_characteristic1_call_acquire_notify_sync (
    AEMIOrgBluezGattCharacteristic1 *proxy,
    GVariant *arg_options,
    GVariant **out_sockfd,
    guint16 *out_mtu,
    GCancellable *cancellable,
    GError **error);

void aemi_org_bluez_gatt_characteristic1_call_start_notify (
    AEMIOrgBluezGattCharacteristic1 *proxy,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean aemi_org_bluez_gatt_characteristic1_call_start_notify_finish (
    AEMIOrgBluezGattCharacteristic1 *proxy,
    GAsyncResult *res,
    GError **error);

gboolean aemi_org_bluez_gatt_characteristic1_call_start_notify_sync (
    AEMIOrgBluezGattCharacteristic1 *proxy,
    GCancellable *cancellable,
    GError **error);

void aemi_org_bluez_gatt_characteristic1_call_stop_notify (
    AEMIOrgBluezGattCharacteristic1 *proxy,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean aemi_org_bluez_gatt_characteristic1_call_stop_notify_finish (
    AEMIOrgBluezGattCharacteristic1 *proxy,
    GAsyncResult *res,
    GError **error);

gboolean aemi_org_bluez_gatt_characteristic1_call_stop_notify_sync (
    AEMIOrgBluezGattCharacteristic1 *proxy,
    GCancellable *cancellable,
    GError **error);

void aemi_org_bluez_gatt_characteristic1_call_confirm (
    AEMIOrgBluezGattCharacteristic1 *proxy,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean aemi_org_bluez_gatt_characteristic1_call_confirm_finish (
    AEMIOrgBluezGattCharacteristic1 *proxy,
    GAsyncResult *res,
    GError **error);

gboolean aemi_org_bluez_gatt_characteristic1_call_confirm_sync (
    AEMIOrgBluezGattCharacteristic1 *proxy,
    GCancellable *cancellable,
    GError **error);



/* D-Bus property accessors: */
const gchar *aemi_org_bluez_gatt_characteristic1_get_uuid (AEMIOrgBluezGattCharacteristic1 *object);
gchar *aemi_org_bluez_gatt_characteristic1_dup_uuid (AEMIOrgBluezGattCharacteristic1 *object);
void aemi_org_bluez_gatt_characteristic1_set_uuid (AEMIOrgBluezGattCharacteristic1 *object, const gchar *value);

const gchar *aemi_org_bluez_gatt_characteristic1_get_service (AEMIOrgBluezGattCharacteristic1 *object);
gchar *aemi_org_bluez_gatt_characteristic1_dup_service (AEMIOrgBluezGattCharacteristic1 *object);
void aemi_org_bluez_gatt_characteristic1_set_service (AEMIOrgBluezGattCharacteristic1 *object, const gchar *value);

const gchar *aemi_org_bluez_gatt_characteristic1_get_value (AEMIOrgBluezGattCharacteristic1 *object);
gchar *aemi_org_bluez_gatt_characteristic1_dup_value (AEMIOrgBluezGattCharacteristic1 *object);
void aemi_org_bluez_gatt_characteristic1_set_value (AEMIOrgBluezGattCharacteristic1 *object, const gchar *value);

gboolean aemi_org_bluez_gatt_characteristic1_get_write_acquired (AEMIOrgBluezGattCharacteristic1 *object);
void aemi_org_bluez_gatt_characteristic1_set_write_acquired (AEMIOrgBluezGattCharacteristic1 *object, gboolean value);

gboolean aemi_org_bluez_gatt_characteristic1_get_notify_acquired (AEMIOrgBluezGattCharacteristic1 *object);
void aemi_org_bluez_gatt_characteristic1_set_notify_acquired (AEMIOrgBluezGattCharacteristic1 *object, gboolean value);

gboolean aemi_org_bluez_gatt_characteristic1_get_notifying (AEMIOrgBluezGattCharacteristic1 *object);
void aemi_org_bluez_gatt_characteristic1_set_notifying (AEMIOrgBluezGattCharacteristic1 *object, gboolean value);

const gchar *const *aemi_org_bluez_gatt_characteristic1_get_flags (AEMIOrgBluezGattCharacteristic1 *object);
gchar **aemi_org_bluez_gatt_characteristic1_dup_flags (AEMIOrgBluezGattCharacteristic1 *object);
void aemi_org_bluez_gatt_characteristic1_set_flags (AEMIOrgBluezGattCharacteristic1 *object, const gchar *const *value);

guint16 aemi_org_bluez_gatt_characteristic1_get_handle (AEMIOrgBluezGattCharacteristic1 *object);
void aemi_org_bluez_gatt_characteristic1_set_handle (AEMIOrgBluezGattCharacteristic1 *object, guint16 value);

guint16 aemi_org_bluez_gatt_characteristic1_get_mtu (AEMIOrgBluezGattCharacteristic1 *object);
void aemi_org_bluez_gatt_characteristic1_set_mtu (AEMIOrgBluezGattCharacteristic1 *object, guint16 value);


/* ---- */

#define AEMI_TYPE_ORG_BLUEZ_GATT_CHARACTERISTIC1_PROXY (aemi_org_bluez_gatt_characteristic1_proxy_get_type ())
#define AEMI_ORG_BLUEZ_GATT_CHARACTERISTIC1_PROXY(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), AEMI_TYPE_ORG_BLUEZ_GATT_CHARACTERISTIC1_PROXY, AEMIOrgBluezGattCharacteristic1Proxy))
#define AEMI_ORG_BLUEZ_GATT_CHARACTERISTIC1_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), AEMI_TYPE_ORG_BLUEZ_GATT_CHARACTERISTIC1_PROXY, AEMIOrgBluezGattCharacteristic1ProxyClass))
#define AEMI_ORG_BLUEZ_GATT_CHARACTERISTIC1_PROXY_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), AEMI_TYPE_ORG_BLUEZ_GATT_CHARACTERISTIC1_PROXY, AEMIOrgBluezGattCharacteristic1ProxyClass))
#define AEMI_IS_ORG_BLUEZ_GATT_CHARACTERISTIC1_PROXY(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), AEMI_TYPE_ORG_BLUEZ_GATT_CHARACTERISTIC1_PROXY))
#define AEMI_IS_ORG_BLUEZ_GATT_CHARACTERISTIC1_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), AEMI_TYPE_ORG_BLUEZ_GATT_CHARACTERISTIC1_PROXY))

typedef struct _AEMIOrgBluezGattCharacteristic1Proxy AEMIOrgBluezGattCharacteristic1Proxy;
typedef struct _AEMIOrgBluezGattCharacteristic1ProxyClass AEMIOrgBluezGattCharacteristic1ProxyClass;
typedef struct _AEMIOrgBluezGattCharacteristic1ProxyPrivate AEMIOrgBluezGattCharacteristic1ProxyPrivate;

struct _AEMIOrgBluezGattCharacteristic1Proxy
{
  /*< private >*/
  GDBusProxy parent_instance;
  AEMIOrgBluezGattCharacteristic1ProxyPrivate *priv;
};

struct _AEMIOrgBluezGattCharacteristic1ProxyClass
{
  GDBusProxyClass parent_class;
};

GType aemi_org_bluez_gatt_characteristic1_proxy_get_type (void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (AEMIOrgBluezGattCharacteristic1Proxy, g_object_unref)
#endif

void aemi_org_bluez_gatt_characteristic1_proxy_new (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
AEMIOrgBluezGattCharacteristic1 *aemi_org_bluez_gatt_characteristic1_proxy_new_finish (
    GAsyncResult        *res,
    GError             **error);
AEMIOrgBluezGattCharacteristic1 *aemi_org_bluez_gatt_characteristic1_proxy_new_sync (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);

void aemi_org_bluez_gatt_characteristic1_proxy_new_for_bus (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
AEMIOrgBluezGattCharacteristic1 *aemi_org_bluez_gatt_characteristic1_proxy_new_for_bus_finish (
    GAsyncResult        *res,
    GError             **error);
AEMIOrgBluezGattCharacteristic1 *aemi_org_bluez_gatt_characteristic1_proxy_new_for_bus_sync (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);


/* ---- */

#define AEMI_TYPE_ORG_BLUEZ_GATT_CHARACTERISTIC1_SKELETON (aemi_org_bluez_gatt_characteristic1_skeleton_get_type ())
#define AEMI_ORG_BLUEZ_GATT_CHARACTERISTIC1_SKELETON(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), AEMI_TYPE_ORG_BLUEZ_GATT_CHARACTERISTIC1_SKELETON, AEMIOrgBluezGattCharacteristic1Skeleton))
#define AEMI_ORG_BLUEZ_GATT_CHARACTERISTIC1_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), AEMI_TYPE_ORG_BLUEZ_GATT_CHARACTERISTIC1_SKELETON, AEMIOrgBluezGattCharacteristic1SkeletonClass))
#define AEMI_ORG_BLUEZ_GATT_CHARACTERISTIC1_SKELETON_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), AEMI_TYPE_ORG_BLUEZ_GATT_CHARACTERISTIC1_SKELETON, AEMIOrgBluezGattCharacteristic1SkeletonClass))
#define AEMI_IS_ORG_BLUEZ_GATT_CHARACTERISTIC1_SKELETON(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), AEMI_TYPE_ORG_BLUEZ_GATT_CHARACTERISTIC1_SKELETON))
#define AEMI_IS_ORG_BLUEZ_GATT_CHARACTERISTIC1_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), AEMI_TYPE_ORG_BLUEZ_GATT_CHARACTERISTIC1_SKELETON))

typedef struct _AEMIOrgBluezGattCharacteristic1Skeleton AEMIOrgBluezGattCharacteristic1Skeleton;
typedef struct _AEMIOrgBluezGattCharacteristic1SkeletonClass AEMIOrgBluezGattCharacteristic1SkeletonClass;
typedef struct _AEMIOrgBluezGattCharacteristic1SkeletonPrivate AEMIOrgBluezGattCharacteristic1SkeletonPrivate;

struct _AEMIOrgBluezGattCharacteristic1Skeleton
{
  /*< private >*/
  GDBusInterfaceSkeleton parent_instance;
  AEMIOrgBluezGattCharacteristic1SkeletonPrivate *priv;
};

struct _AEMIOrgBluezGattCharacteristic1SkeletonClass
{
  GDBusInterfaceSkeletonClass parent_class;
};

GType aemi_org_bluez_gatt_characteristic1_skeleton_get_type (void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (AEMIOrgBluezGattCharacteristic1Skeleton, g_object_unref)
#endif

AEMIOrgBluezGattCharacteristic1 *aemi_org_bluez_gatt_characteristic1_skeleton_new (void);


/* ---- */

#define AEMI_TYPE_OBJECT (aemi_object_get_type ())
#define AEMI_OBJECT(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), AEMI_TYPE_OBJECT, AEMIObject))
#define AEMI_IS_OBJECT(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), AEMI_TYPE_OBJECT))
#define AEMI_OBJECT_GET_IFACE(o) (G_TYPE_INSTANCE_GET_INTERFACE ((o), AEMI_TYPE_OBJECT, AEMIObject))

struct _AEMIObject;
typedef struct _AEMIObject AEMIObject;
typedef struct _AEMIObjectIface AEMIObjectIface;

struct _AEMIObjectIface
{
  GTypeInterface parent_iface;
};

GType aemi_object_get_type (void) G_GNUC_CONST;

AEMIOrgFreedesktopDBusProperties *aemi_object_get_org_freedesktop_dbus_properties (AEMIObject *object);
AEMIOrgBluezGattService1 *aemi_object_get_org_bluez_gatt_service1 (AEMIObject *object);
AEMIOrgBluezGattCharacteristic1 *aemi_object_get_org_bluez_gatt_characteristic1 (AEMIObject *object);
AEMIOrgFreedesktopDBusProperties *aemi_object_peek_org_freedesktop_dbus_properties (AEMIObject *object);
AEMIOrgBluezGattService1 *aemi_object_peek_org_bluez_gatt_service1 (AEMIObject *object);
AEMIOrgBluezGattCharacteristic1 *aemi_object_peek_org_bluez_gatt_characteristic1 (AEMIObject *object);

#define AEMI_TYPE_OBJECT_PROXY (aemi_object_proxy_get_type ())
#define AEMI_OBJECT_PROXY(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), AEMI_TYPE_OBJECT_PROXY, AEMIObjectProxy))
#define AEMI_OBJECT_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), AEMI_TYPE_OBJECT_PROXY, AEMIObjectProxyClass))
#define AEMI_OBJECT_PROXY_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), AEMI_TYPE_OBJECT_PROXY, AEMIObjectProxyClass))
#define AEMI_IS_OBJECT_PROXY(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), AEMI_TYPE_OBJECT_PROXY))
#define AEMI_IS_OBJECT_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), AEMI_TYPE_OBJECT_PROXY))

typedef struct _AEMIObjectProxy AEMIObjectProxy;
typedef struct _AEMIObjectProxyClass AEMIObjectProxyClass;
typedef struct _AEMIObjectProxyPrivate AEMIObjectProxyPrivate;

struct _AEMIObjectProxy
{
  /*< private >*/
  GDBusObjectProxy parent_instance;
  AEMIObjectProxyPrivate *priv;
};

struct _AEMIObjectProxyClass
{
  GDBusObjectProxyClass parent_class;
};

GType aemi_object_proxy_get_type (void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (AEMIObjectProxy, g_object_unref)
#endif

AEMIObjectProxy *aemi_object_proxy_new (GDBusConnection *connection, const gchar *object_path);

#define AEMI_TYPE_OBJECT_SKELETON (aemi_object_skeleton_get_type ())
#define AEMI_OBJECT_SKELETON(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), AEMI_TYPE_OBJECT_SKELETON, AEMIObjectSkeleton))
#define AEMI_OBJECT_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), AEMI_TYPE_OBJECT_SKELETON, AEMIObjectSkeletonClass))
#define AEMI_OBJECT_SKELETON_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), AEMI_TYPE_OBJECT_SKELETON, AEMIObjectSkeletonClass))
#define AEMI_IS_OBJECT_SKELETON(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), AEMI_TYPE_OBJECT_SKELETON))
#define AEMI_IS_OBJECT_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), AEMI_TYPE_OBJECT_SKELETON))

typedef struct _AEMIObjectSkeleton AEMIObjectSkeleton;
typedef struct _AEMIObjectSkeletonClass AEMIObjectSkeletonClass;
typedef struct _AEMIObjectSkeletonPrivate AEMIObjectSkeletonPrivate;

struct _AEMIObjectSkeleton
{
  /*< private >*/
  GDBusObjectSkeleton parent_instance;
  AEMIObjectSkeletonPrivate *priv;
};

struct _AEMIObjectSkeletonClass
{
  GDBusObjectSkeletonClass parent_class;
};

GType aemi_object_skeleton_get_type (void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (AEMIObjectSkeleton, g_object_unref)
#endif

AEMIObjectSkeleton *aemi_object_skeleton_new (const gchar *object_path);
void aemi_object_skeleton_set_org_freedesktop_dbus_properties (AEMIObjectSkeleton *object, AEMIOrgFreedesktopDBusProperties *interface_);
void aemi_object_skeleton_set_org_bluez_gatt_service1 (AEMIObjectSkeleton *object, AEMIOrgBluezGattService1 *interface_);
void aemi_object_skeleton_set_org_bluez_gatt_characteristic1 (AEMIObjectSkeleton *object, AEMIOrgBluezGattCharacteristic1 *interface_);

/* ---- */

#define AEMI_TYPE_OBJECT_MANAGER_CLIENT (aemi_object_manager_client_get_type ())
#define AEMI_OBJECT_MANAGER_CLIENT(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), AEMI_TYPE_OBJECT_MANAGER_CLIENT, AEMIObjectManagerClient))
#define AEMI_OBJECT_MANAGER_CLIENT_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), AEMI_TYPE_OBJECT_MANAGER_CLIENT, AEMIObjectManagerClientClass))
#define AEMI_OBJECT_MANAGER_CLIENT_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), AEMI_TYPE_OBJECT_MANAGER_CLIENT, AEMIObjectManagerClientClass))
#define AEMI_IS_OBJECT_MANAGER_CLIENT(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), AEMI_TYPE_OBJECT_MANAGER_CLIENT))
#define AEMI_IS_OBJECT_MANAGER_CLIENT_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), AEMI_TYPE_OBJECT_MANAGER_CLIENT))

typedef struct _AEMIObjectManagerClient AEMIObjectManagerClient;
typedef struct _AEMIObjectManagerClientClass AEMIObjectManagerClientClass;
typedef struct _AEMIObjectManagerClientPrivate AEMIObjectManagerClientPrivate;

struct _AEMIObjectManagerClient
{
  /*< private >*/
  GDBusObjectManagerClient parent_instance;
  AEMIObjectManagerClientPrivate *priv;
};

struct _AEMIObjectManagerClientClass
{
  GDBusObjectManagerClientClass parent_class;
};

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (AEMIObjectManagerClient, g_object_unref)
#endif

GType aemi_object_manager_client_get_type (void) G_GNUC_CONST;

GType aemi_object_manager_client_get_proxy_type (GDBusObjectManagerClient *manager, const gchar *object_path, const gchar *interface_name, gpointer user_data);

void aemi_object_manager_client_new (
    GDBusConnection        *connection,
    GDBusObjectManagerClientFlags  flags,
    const gchar            *name,
    const gchar            *object_path,
    GCancellable           *cancellable,
    GAsyncReadyCallback     callback,
    gpointer                user_data);
GDBusObjectManager *aemi_object_manager_client_new_finish (
    GAsyncResult        *res,
    GError             **error);
GDBusObjectManager *aemi_object_manager_client_new_sync (
    GDBusConnection        *connection,
    GDBusObjectManagerClientFlags  flags,
    const gchar            *name,
    const gchar            *object_path,
    GCancellable           *cancellable,
    GError                **error);

void aemi_object_manager_client_new_for_bus (
    GBusType                bus_type,
    GDBusObjectManagerClientFlags  flags,
    const gchar            *name,
    const gchar            *object_path,
    GCancellable           *cancellable,
    GAsyncReadyCallback     callback,
    gpointer                user_data);
GDBusObjectManager *aemi_object_manager_client_new_for_bus_finish (
    GAsyncResult        *res,
    GError             **error);
GDBusObjectManager *aemi_object_manager_client_new_for_bus_sync (
    GBusType                bus_type,
    GDBusObjectManagerClientFlags  flags,
    const gchar            *name,
    const gchar            *object_path,
    GCancellable           *cancellable,
    GError                **error);


G_END_DECLS

#endif /* __BLUEZ_GATT_H__ */
